function results = rgb_hist(im)
%Image Processing Function
%
% IM      - Input image.
% RESULTS - A scalar structure with the processing results.
%

%--------------------------------------------------------------------------
% Auto-generated by imageBatchProcessor App. 
%
% When used by the App, this function will be called for every input image
% file automatically. IM contains the input image as a matrix. RESULTS is a
% scalar structure containing the results of this processing function.
%
%--------------------------------------------------------------------------



% Replace the sample below with your code----------------------------------

% if(size(im,3)==3)
%     % Convert RGB to grayscale
%     imgray = rgb2gray(im);
% else
%     imgray = im;
% end
% 
% bw = imbinarize(imgray);
% 
% results.imgray = imgray;
% results.bw     = bw;
%%
% Preallocate arrays to hold the mean intensity values of all the images.
% redChannel_Mean = zeros(numberOfImagesToProcess, 1);
% greenChannel_Mean = zeros(numberOfImagesToProcess, 1);
% blueChannel_Mean = zeros(numberOfImagesToProcess, 1);

rgbImage = im;
% rgbImage = imread(strcat(folder,baseFileName));


% 	[rows columns numberOfColorBands] = size(rgbImage);
	

	
% Extract the individual red, green, and blue color channels.
redChannel = rgbImage(:, :, 1);
greenChannel = rgbImage(:, :, 2);
blueChannel = rgbImage(:, :, 3);
	
% 	% Red image:
 	% Compute mean
redChannel_Mean = mean(redChannel(:));
results.redChannel_Mean     = redChannel_Mean;
    % Compute std 
redChannel_std = std2(redChannel(:));
results.redChannel_std     = redChannel_std;
    
	% Green image:
greenChannel_Mean = mean(greenChannel(:));
results.greenChannel_Mean     = greenChannel_Mean;
    % Compute std 
greenChannel_std = std2(greenChannel(:));
results.greenChannel_std     = greenChannel_std;

	% Blue image:
 	% Compute mean
blueChannel_Mean = mean(blueChannel(:));
results.blueChannel_Mean     = blueChannel_Mean;
   % Compute std 
blueChannel_std = std2(blueChannel(:));
results.blueChannel_std      = blueChannel_std;
end
%--------------------------------------------------------------------------
